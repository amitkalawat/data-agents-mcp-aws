#!/usr/bin/env python3
"""
AI Agent Query Examples for ACME Corp SageMaker Lakehouse
Demonstrates how an AI agent can query data using the AWS Data Processing MCP Server
"""

import json
from typing import Dict, List, Any

class AIAgentQueryExamples:
    """
    Examples of natural language queries that an AI agent can execute
    using the AWS Data Processing MCP Server against ACME Corp data
    """
    
    def __init__(self):
        self.database = "acme_corp_lakehouse"
        self.mcp_server = "aws-dataprocessing"
    
    def get_query_examples(self) -> List[Dict[str, Any]]:
        """Return a collection of example queries with their SQL translations"""
        
        return [
            {
                "id": 1,
                "natural_language": "What is the average lifetime value of Premium subscribers who watched sci-fi content?",
                "sql": """
                    SELECT 
                        AVG(CAST(u.monthly_price AS DOUBLE) * 12) as avg_annual_value,
                        COUNT(DISTINCT u.user_id) as user_count
                    FROM user_details u
                    WHERE u.subscription_plan = 'Premium'
                    AND u.is_active = true
                    AND EXISTS (
                        SELECT 1 
                        FROM streaming_analytics s
                        JOIN content_library c ON s.content_id = c.content_id
                        WHERE s.user_id = u.user_id
                        AND c.genre = 'Sci-Fi'
                    )
                """,
                "mcp_tool": "athena_query_handler",
                "expected_insights": [
                    "Average annual revenue per Premium sci-fi viewer",
                    "Total number of Premium subscribers watching sci-fi"
                ]
            },
            {
                "id": 2,
                "natural_language": "Which ad campaigns drove the most conversions for users aged 25-34?",
                "sql": """
                    SELECT 
                        c.campaign_name,
                        c.campaign_type,
                        COUNT(DISTINCT a.user_id) as converted_users,
                        SUM(a.attributed_revenue) as total_revenue,
                        AVG(a.attribution_weight) as avg_attribution_weight
                    FROM attribution_data a
                    JOIN campaigns c ON a.campaign_id = c.campaign_id
                    JOIN user_details u ON a.user_id = u.user_id
                    WHERE u.age BETWEEN 25 AND 34
                    GROUP BY c.campaign_name, c.campaign_type
                    ORDER BY converted_users DESC
                    LIMIT 10
                """,
                "mcp_tool": "athena_query_handler",
                "expected_insights": [
                    "Top performing campaigns for 25-34 age group",
                    "Revenue generated by demographic",
                    "Most effective campaign types"
                ]
            },
            {
                "id": 3,
                "natural_language": "What is the correlation between viewing completion rates and subscription plan?",
                "sql": """
                    WITH user_viewing_stats AS (
                        SELECT 
                            s.user_id,
                            AVG(s.completion_rate) as avg_completion_rate,
                            AVG(s.engagement_score) as avg_engagement,
                            COUNT(*) as total_sessions
                        FROM streaming_analytics s
                        GROUP BY s.user_id
                    )
                    SELECT 
                        u.subscription_plan,
                        COUNT(DISTINCT u.user_id) as users,
                        AVG(v.avg_completion_rate) as avg_completion_rate,
                        AVG(v.avg_engagement) as avg_engagement_score,
                        AVG(v.total_sessions) as avg_sessions_per_user
                    FROM user_details u
                    JOIN user_viewing_stats v ON u.user_id = v.user_id
                    WHERE u.is_active = true
                    GROUP BY u.subscription_plan
                    ORDER BY avg_completion_rate DESC
                """,
                "mcp_tool": "athena_query_handler",
                "expected_insights": [
                    "Completion rates by subscription tier",
                    "Engagement patterns across plans",
                    "Session frequency correlation"
                ]
            },
            {
                "id": 4,
                "natural_language": "Which content titles are most popular among users acquired through social media campaigns?",
                "sql": """
                    WITH social_media_users AS (
                        SELECT DISTINCT a.user_id
                        FROM attribution_data a
                        JOIN campaigns c ON a.campaign_id = c.campaign_id
                        WHERE c.campaign_type = 'Social Media'
                    )
                    SELECT 
                        cl.title,
                        cl.genre,
                        COUNT(DISTINCT s.user_id) as unique_viewers,
                        COUNT(*) as total_views,
                        AVG(s.watch_duration_minutes) as avg_watch_duration,
                        AVG(s.completion_rate) as avg_completion_rate
                    FROM streaming_analytics s
                    JOIN content_library cl ON s.content_id = cl.content_id
                    WHERE s.user_id IN (SELECT user_id FROM social_media_users)
                    GROUP BY cl.title, cl.genre
                    ORDER BY unique_viewers DESC
                    LIMIT 20
                """,
                "mcp_tool": "athena_query_handler",
                "expected_insights": [
                    "Content preferences of social media acquired users",
                    "Viewing behavior patterns",
                    "Content performance metrics"
                ]
            },
            {
                "id": 5,
                "natural_language": "What is the ROI of video campaigns promoting specific content?",
                "sql": """
                    WITH video_campaign_performance AS (
                        SELECT 
                            c.campaign_id,
                            c.campaign_name,
                            c.promoted_content_title,
                            c.budget,
                            SUM(p.spend) as total_spend,
                            SUM(p.conversions) as total_conversions,
                            SUM(p.views) as total_views
                        FROM campaigns c
                        JOIN campaign_performance p ON c.campaign_id = p.campaign_id
                        WHERE c.campaign_type = 'Video'
                        AND c.promoted_content_title IS NOT NULL
                        GROUP BY c.campaign_id, c.campaign_name, c.promoted_content_title, c.budget
                    ),
                    content_viewing AS (
                        SELECT 
                            cl.title,
                            COUNT(DISTINCT s.user_id) as viewers_after_campaign,
                            AVG(s.engagement_score) as avg_engagement
                        FROM streaming_analytics s
                        JOIN content_library cl ON s.content_id = cl.content_id
                        GROUP BY cl.title
                    )
                    SELECT 
                        vcp.campaign_name,
                        vcp.promoted_content_title,
                        vcp.budget,
                        vcp.total_spend,
                        vcp.total_conversions,
                        cv.viewers_after_campaign,
                        cv.avg_engagement,
                        ROUND((vcp.total_conversions * 10.0 - vcp.total_spend) / vcp.total_spend * 100, 2) as estimated_roi_percentage
                    FROM video_campaign_performance vcp
                    LEFT JOIN content_viewing cv ON vcp.promoted_content_title = cv.title
                    WHERE vcp.total_spend > 0
                    ORDER BY estimated_roi_percentage DESC
                """,
                "mcp_tool": "athena_query_handler",
                "expected_insights": [
                    "ROI of content-specific video campaigns",
                    "Viewer acquisition effectiveness",
                    "Content engagement post-campaign"
                ]
            }
        ]
    
    def generate_mcp_request(self, query_id: int) -> Dict[str, Any]:
        """Generate an MCP request for a specific query"""
        examples = self.get_query_examples()
        query = next((q for q in examples if q['id'] == query_id), None)
        
        if not query:
            return {"error": "Query not found"}
        
        return {
            "tool": query['mcp_tool'],
            "parameters": {
                "query": query['sql'],
                "database": self.database,
                "output_format": "json",
                "include_metadata": True
            },
            "context": {
                "natural_language_query": query['natural_language'],
                "expected_insights": query['expected_insights']
            }
        }
    
    def get_glue_catalog_request(self) -> Dict[str, Any]:
        """Generate MCP request to explore Glue Data Catalog"""
        return {
            "tool": "glue_data_catalog_handler",
            "action": "list_tables",
            "parameters": {
                "database": self.database
            }
        }
    
    def get_table_schema_request(self, table_name: str) -> Dict[str, Any]:
        """Generate MCP request to get table schema"""
        return {
            "tool": "glue_data_catalog_handler",
            "action": "get_table",
            "parameters": {
                "database": self.database,
                "table": table_name
            }
        }

def demonstrate_ai_agent_workflow():
    """Demonstrate how an AI agent would use the MCP server"""
    agent = AIAgentQueryExamples()
    
    print("🤖 AI Agent Query Workflow Demo")
    print("=" * 70)
    print()
    
    # Step 1: Explore available tables
    print("Step 1: Discovering available tables")
    print("-" * 50)
    catalog_request = agent.get_glue_catalog_request()
    print(json.dumps(catalog_request, indent=2))
    print()
    
    # Step 2: Get schema for a specific table
    print("Step 2: Getting schema for user_details table")
    print("-" * 50)
    schema_request = agent.get_table_schema_request("user_details")
    print(json.dumps(schema_request, indent=2))
    print()
    
    # Step 3: Execute natural language queries
    print("Step 3: Executing natural language queries")
    print("-" * 50)
    
    for example in agent.get_query_examples():
        print(f"\nQuery {example['id']}: {example['natural_language']}")
        mcp_request = agent.generate_mcp_request(example['id'])
        print(f"MCP Tool: {mcp_request['tool']}")
        print(f"Expected Insights: {', '.join(example['expected_insights'])}")
    
    print("\n" + "=" * 70)
    print("AI Agent Integration Complete!")
    print("\nThe AI agent can now:")
    print("✅ Discover available tables in the lakehouse")
    print("✅ Understand table schemas automatically")
    print("✅ Convert natural language queries to SQL")
    print("✅ Execute queries via MCP server")
    print("✅ Process and present results to users")

if __name__ == "__main__":
    demonstrate_ai_agent_workflow()